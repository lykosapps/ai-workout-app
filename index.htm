<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Workout Planner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Serene Fitness -->
    <!-- Application Structure Plan: The application is designed as a single-page dashboard to provide a seamless and focused user experience. The structure is thematic, starting with a high-level schedule choice, then drilling down into specific workout details via an interactive tab system. This is more intuitive than a linear document, allowing users to quickly access the information they need for a given day. A key interaction is the ability to switch between gym and home versions of exercises, directly addressing a core user need. A muscle group focus chart adds a data visualization layer for better workout understanding. This structure was chosen to transform a static plan into a dynamic and motivational tool. -->
    <!-- Visualization & Content Choices: 
        - Report Info: Weekly schedule (2-day vs 3-day). Goal: Inform & Allow Choice. Viz/Method: Interactive buttons. Interaction: Click to select plan, updating the displayed schedule. Justification: Simple, direct interaction for a primary user choice. Library: Vanilla JS.
        - Report Info: Workout routines (A, B, C). Goal: Organize & Detail. Viz/Method: Tabbed interface. Interaction: Click tabs to switch between workouts. Justification: Organizes a large amount of information cleanly, preventing cognitive overload. Library: Vanilla JS.
        - Report Info: Muscle groups targeted. Goal: Compare & Inform. Viz/Method: Donut Chart. Interaction: Chart updates when a new workout tab is selected. Justification: Provides a quick visual summary of each workout's focus, aiding in understanding the plan's structure. Library: Chart.js.
        - Report Info: Gym vs. Home exercises. Goal: Allow Choice & Adaptability. Viz/Method: Toggle switch. Interaction: Toggles all exercises in the visible workout between gym and home versions. Justification: A critical feature for user flexibility, implemented as a simple, universal control. Library: Vanilla JS.
        - Report Info: Supplement suggestions. Goal: Inform. Viz/Method: Icon-based card layout. Interaction: Static display. Justification: Visually separates this supplementary information, making it easy to digest. Method: HTML/Tailwind with Unicode icons.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 350px;
            margin-left: auto;
            margin-right: auto;
            height: 250px;
            max-height: 250px;
        }
        .active-tab {
            border-bottom-color: #4f46e5;
            color: #4f46e5;
            font-weight: 600;
        }
        .inactive-tab {
            border-bottom-color: transparent;
            color: #6b7280;
        }
        .plan-btn-active {
            background-color: #4f46e5;
            color: white;
        }
        .plan-btn-inactive {
            background-color: #e5e7eb;
            color: #374151;
        }
        .gemini-btn {
            background-color: #6366f1;
            color: white;
            transition: background-color 0.3s;
        }
        .gemini-btn:hover {
            background-color: #4f46e5;
        }
        .loader {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #4f46e5;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #4f46e5;
            cursor: pointer;
            border-radius: 50%;
        }
        input[type=range]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #4f46e5;
            cursor: pointer;
            border-radius: 50%;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        
        <header class="text-center mb-10">
            <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900">Your AI-Powered Workout Planner</h1>
            <p class="mt-2 text-base sm:text-lg text-gray-600">Enhanced with AI to give you more exercise options.</p>
        </header>

        <main>
            <section id="schedule" class="mb-12 bg-white p-4 sm:p-6 rounded-xl shadow-md">
                <h2 class="text-xl sm:text-2xl font-bold mb-4 text-center">1. Choose Your Weekly Plan</h2>
                <div class="flex justify-center space-x-4 mb-6">
                    <button id="btn-2-day" class="plan-btn-inactive px-4 py-2 sm:px-6 rounded-lg font-semibold transition-all duration-300">2-Day Plan</button>
                    <button id="btn-3-day" class="plan-btn-active px-4 py-2 sm:px-6 rounded-lg font-semibold transition-all duration-300">3-Day Plan</button>
                </div>
                <div id="schedule-display" class="text-center bg-indigo-50 p-4 rounded-lg">
                    <p class="font-semibold text-indigo-800 text-sm sm:text-base">Example: Workout on <span id="day-1">Monday</span> and <span id="day-2">Thursday</span>.</p>
                </div>
            </section>

            <section id="workouts" class="mb-12">
                 <h2 class="text-xl sm:text-2xl font-bold mb-2 text-center">2. Explore Your Workouts</h2>
                 <p class="text-center text-gray-600 mb-6 px-2">Customize your muscle focus, then select a workout below.</p>
                
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div class="bg-white p-6 rounded-xl shadow-md flex flex-col">
                        <h3 class="text-xl font-bold mb-4 text-center">Muscle Group Focus</h3>
                        <div class="chart-container mb-6">
                            <canvas id="muscle-chart"></canvas>
                        </div>
                        <div id="configurator" class="space-y-4">
                            <div>
                                <label for="lower-body-slider" class="flex justify-between font-semibold text-sm"><span>Lower Body</span><span id="lower-body-value">40%</span></label>
                                <input type="range" id="lower-body-slider" min="0" max="100" value="40" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            </div>
                            <div>
                                <label for="upper-body-slider" class="flex justify-between font-semibold text-sm"><span>Upper Body</span><span id="upper-body-value">40%</span></label>
                                <input type="range" id="upper-body-slider" min="0" max="100" value="40" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            </div>
                            <div>
                                <label for="core-cardio-slider" class="flex justify-between font-semibold text-sm"><span>Core & Cardio</span><span id="core-cardio-value">20%</span></label>
                                <input type="range" id="core-cardio-slider" min="0" max="100" value="20" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            </div>
                            <div class="flex justify-center space-x-4 pt-2">
                                <button id="generate-plan-btn" class="gemini-btn px-4 py-2 rounded-lg font-semibold">Generate New Plan</button>
                                <button id="reset-plan-btn" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-semibold">Reset</button>
                            </div>
                        </div>
                    </div>
                    <div class="lg:col-span-2 bg-white p-4 sm:p-6 rounded-xl shadow-md">
                        <div class="flex justify-between items-center border-b border-gray-200 mb-4">
                            <div class="flex items-center space-x-2">
                                <span class="font-semibold text-gray-600 text-sm hidden sm:inline">Gym</span>
                                <label for="env-toggle" class="flex items-center cursor-pointer">
                                    <div class="relative">
                                        <input type="checkbox" id="env-toggle" class="sr-only">
                                        <div class="block bg-gray-300 w-14 h-8 rounded-full"></div>
                                        <div class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"></div>
                                    </div>
                                </label>
                                <span class="font-semibold text-gray-600 text-sm hidden sm:inline">Home</span>
                            </div>
                            <nav class="-mb-px flex space-x-4 sm:space-x-8" aria-label="Tabs">
                                <button id="tab-a" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm active-tab">Workout A</button>
                                <button id="tab-b" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm inactive-tab">Workout B</button>
                                <button id="tab-c" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm inactive-tab">Workout C</button>
                            </nav>
                        </div>
                        <div id="workout-content">
                        </div>
                    </div>
                </div>
            </section>

            <section id="supplements" class="mb-12 bg-white p-4 sm:p-6 rounded-xl shadow-md">
                <h2 class="text-xl sm:text-2xl font-bold mb-6 text-center">3. Nutrition & Supplement Guide</h2>
                <p class="text-center text-gray-600 mb-8 max-w-2xl mx-auto">Supplements can support your goals, but remember to consult with your doctor before starting any new regimen. A healthy diet is always the foundation.</p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 sm:gap-8 text-center">
                    <div class="bg-gray-50 p-6 rounded-lg">
                        <div class="text-4xl mb-3">🥤</div>
                        <a href="https://www.amazon.com.au/s?k=whey+protein" target="_blank" class="text-gray-800 hover:text-indigo-600 transition-colors">
                            <h3 class="text-xl font-semibold mb-2">Protein Powder</h3>
                        </a>
                        <p class="text-gray-600">Aids muscle repair and growth. A post-workout shake can be an efficient way to get the protein your muscles need.</p>
                    </div>
                    <div class="bg-gray-50 p-6 rounded-lg">
                        <div class="text-4xl mb-3">💪</div>
                        <a href="https://www.amazon.com.au/s?k=creatine+monohydrate" target="_blank" class="text-gray-800 hover:text-indigo-600 transition-colors">
                            <h3 class="text-xl font-semibold mb-2">Creatine Monohydrate</h3>
                        </a>
                        <p class="text-gray-600">Increases strength and power output during your workouts. Take 5g daily for best results.</p>
                    </div>
                    <div class="bg-gray-50 p-6 rounded-lg">
                        <div class="text-4xl mb-3">⚡️</div>
                        <a href="https://www.amazon.com.au/s?k=pre+workout" target="_blank" class="text-gray-800 hover:text-indigo-600 transition-colors">
                            <h3 class="text-xl font-semibold mb-2">Pre-Workout</h3>
                        </a>
                        <p class="text-gray-600">Provides an energy and focus boost. Start with a half scoop to assess tolerance. A cup of coffee also works!</p>
                    </div>
                </div>
            </section>
        </main>
        
        <footer class="text-center mt-12 py-6 border-t border-gray-200">
             <p class="text-gray-600">Consistency is your superpower. Keep showing up for yourself!</p>
        </footer>

    </div>

    <script>
        const originalWorkoutData = {
            'A': {
                exercises: [
                    { id: 'a1', name: 'Lower Body', gym: 'Goblet Squats (Dumbbell)', home: 'Bodyweight Squats', sets: "3", reps: '8-12' },
                    { id: 'a2', name: 'Upper Body (Push)', gym: 'Dumbbell Bench Press', home: 'Push-ups (on knees if needed)', sets: "3", reps: '8-12' },
                    { id: 'a3', name: 'Upper Body (Pull)', gym: 'Bent-Over Dumbbell Rows', home: 'Superman Lifts', sets: "3", reps: '8-12' },
                    { id: 'a4', name: 'Core', gym: 'Plank', home: 'Plank', sets: "3", reps: '30-60s' },
                    { id: 'a5', name: 'Cardio Finisher', gym: 'Incline Treadmill Walk', home: 'Jumping Jacks', sets: "1", reps: '10-15 min' }
                ],
                muscleFocus: [40, 40, 20]
            },
            'B': {
                exercises: [
                    { id: 'b1', name: 'Lower Body', gym: 'Walking Lunges (Dumbbells)', home: 'Bodyweight Alternating Lunges', sets: "3", reps: '10-12 per leg' },
                    { id: 'b2', name: 'Upper Body (Push)', gym: 'Seated Dumbbell Overhead Press', home: 'Pike Push-ups', sets: "3", reps: '8-12' },
                    { id: 'b3', name: 'Upper Body (Pull)', gym: 'Lat Pulldown Machine', home: 'Inverted Rows (using a sturdy table)', sets: "3", reps: '8-12' },
                    { id: 'b4', name: 'Core', gym: 'Russian Twists (with weight)', home: 'Bicycle Crunches', sets: "3", reps: '15-20' },
                    { id: 'b5', name: 'Cardio Finisher', gym: 'Stationary Bike or Rower', home: 'Burpees', sets: "1", reps: '10-15 min' }
                ],
                muscleFocus: [40, 40, 20]
            },
            'C': {
                exercises: [
                    { id: 'c1', name: 'Lower Body', gym: 'Romanian Deadlifts (Dumbbells)', home: 'Glute Bridges', sets: "3", reps: '8-12' },
                    { id: 'c2', name: 'Upper Body (Push)', gym: 'Incline Dumbbell Press', home: 'Decline Push-ups (feet on a chair)', sets: "3", reps: '8-12' },
                    { id: 'c3', name: 'Upper Body (Pull)', gym: 'Seated Cable Row', home: 'Band Pull-Aparts', sets: "3", reps: '8-12' },
                    { id: 'c4', name: 'Core', gym: 'Hanging Knee Raises', home: 'Lying Leg Raises', sets: "3", reps: '10-15' },
                    { id: 'c5', name: 'Cardio Finisher', gym: 'Elliptical Machine', home: 'Shadow Boxing', sets: "1", reps: '10-15 min' }
                ],
                muscleFocus: [40, 40, 20]
            }
        };

        let workoutData = JSON.parse(JSON.stringify(originalWorkoutData));
        let currentPlan = '3-day';
        let currentWorkout = 'A';
        let isHome = false;
        let muscleChart;

        const btn2Day = document.getElementById('btn-2-day');
        const btn3Day = document.getElementById('btn-3-day');
        const scheduleDisplay = {
            day1: document.getElementById('day-1'),
            day2: document.getElementById('day-2'),
        };
        const workoutContent = document.getElementById('workout-content');
        const envToggle = document.getElementById('env-toggle');
        const tabs = { 'A': document.getElementById('tab-a'), 'B': document.getElementById('tab-b'), 'C': document.getElementById('tab-c') };
        
        const sliders = {
            lower: document.getElementById('lower-body-slider'),
            upper: document.getElementById('upper-body-slider'),
            core: document.getElementById('core-cardio-slider'),
        };
        const values = {
            lower: document.getElementById('lower-body-value'),
            upper: document.getElementById('upper-body-value'),
            core: document.getElementById('core-cardio-value'),
        };
        const generatePlanBtn = document.getElementById('generate-plan-btn');
        const resetPlanBtn = document.getElementById('reset-plan-btn');

        async function callGemini(prompt, buttonElement, useJson = false) {
            const originalContent = buttonElement.innerHTML;
            buttonElement.disabled = true;
            buttonElement.innerHTML = '<div class="loader"></div>';

            const apiKey = "AIzaSyBJ5lskxzRyR4xA8-EPU4GlbJ2fFhCsisU";
            
            if (apiKey === "YOUR_API_KEY_HERE") {
                alert("Please replace 'YOUR_API_KEY_HERE' with your actual Gemini API key in the HTML file.");
                buttonElement.disabled = false;
                buttonElement.innerHTML = originalContent;
                return "API Key not set.";
            }

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

            if (useJson) {
                payload.generationConfig = {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: {
                                name: { type: "STRING" },
                                exerciseName: { type: "STRING" },
                                sets: { type: "STRING" },
                                reps: { type: "STRING" }
                            },
                            required: ["name", "exerciseName", "sets", "reps"]
                        }
                    }
                };
            }

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) throw new Error(`API call failed with status: ${response.status}`);
                const result = await response.json();
                if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text.trim();
                }
                return null;
            } catch (error) {
                console.error("Gemini API call error:", error);
                return null;
            } finally {
                buttonElement.disabled = false;
                buttonElement.innerHTML = originalContent;
            }
        }

        async function getExerciseAlternative(exerciseName, muscleGroup, environment, buttonElement) {
            const prompt = `Suggest one alternative exercise for "${exerciseName}" that targets the ${muscleGroup}. The user is in a ${environment} setting. Provide only the name of the exercise.`;
            const alternative = await callGemini(prompt, buttonElement);
            if (!alternative || alternative === "API Key not set.") return;

            const exerciseId = buttonElement.dataset.exerciseId;
            const exerciseNameElement = document.getElementById(`exercise-name-${exerciseId}`);
            if (exerciseNameElement) {
                const videoLink = `https://www.youtube.com/results?search_query=${encodeURIComponent(alternative)}+form+short`;
                exerciseNameElement.innerHTML = `<a href="${videoLink}" target="_blank" title="Watch demonstration" class="text-indigo-600 hover:text-indigo-800">${alternative} (AI) <span class="text-xs">▶️</span></a>`;
            }
        }

        async function generateCustomWorkout() {
            const lower = sliders.lower.value;
            const upper = sliders.upper.value;
            const core = sliders.core.value;
            const environment = isHome ? 'home' : 'gym';
            const prompt = `You are a fitness planner. Create a custom full-body workout for 'Workout ${currentWorkout}'. The desired focus is ${lower}% Lower Body, ${upper}% Upper Body, and ${core}% Core & Cardio. The user is in a ${environment} setting. Provide a list of exactly 5 exercises: one for 'Lower Body', 'Upper Body (Push)', 'Upper Body (Pull)', 'Core', and 'Cardio Finisher'. Suggest sets and reps for each. Respond ONLY with a JSON array of objects, following the specified schema.`;
            
            const result = await callGemini(prompt, generatePlanBtn, true);
            if (result) {
                try {
                    const newExercises = JSON.parse(result);
                    const newWorkout = {
                        exercises: newExercises.map((ex, index) => ({
                            ...ex,
                            id: `${currentWorkout.toLowerCase()}${index + 1}`,
                            gym: ex.exerciseName,
                            home: ex.exerciseName,
                        })),
                        muscleFocus: [parseInt(lower), parseInt(upper), parseInt(core)]
                    };
                    workoutData[currentWorkout] = newWorkout;
                    renderWorkout();
                } catch (e) {
                    console.error("Failed to parse JSON from Gemini:", e);
                    alert("There was an error generating the new workout plan. Please try again.");
                }
            } else {
                 alert("There was an error generating the new workout plan. Please try again.");
            }
        }

        function updateScheduleDisplay() {
            if (currentPlan === '2-day') {
                scheduleDisplay.day1.textContent = 'Monday';
                scheduleDisplay.day2.textContent = ' and Thursday';
                btn2Day.classList.remove('plan-btn-inactive');
                btn2Day.classList.add('plan-btn-active');
                btn3Day.classList.remove('plan-btn-active');
                btn3Day.classList.add('plan-btn-inactive');
                tabs.C.style.display = 'none';
                if (currentWorkout === 'C') switchTab('A');
            } else {
                scheduleDisplay.day1.textContent = 'Monday, Wednesday,';
                scheduleDisplay.day2.textContent = ' and Friday';
                btn3Day.classList.remove('plan-btn-inactive');
                btn3Day.classList.add('plan-btn-active');
                btn2Day.classList.remove('plan-btn-active');
                btn2Day.classList.add('plan-btn-inactive');
                tabs.C.style.display = 'inline-block';
            }
        }

        function renderWorkout() {
            const workout = workoutData[currentWorkout];
            const environment = isHome ? 'home' : 'gym';
            
            let html = '<div class="space-y-4">';
            workout.exercises.forEach(ex => {
                const exerciseName = ex[environment] || ex.exerciseName;
                const videoLink = `https://www.youtube.com/results?search_query=${encodeURIComponent(exerciseName)}+form+short`;
                html += `
                    <div class="border-b border-gray-100 py-3">
                        <div class="font-semibold text-gray-700">${ex.name}</div>
                        <div class="flex justify-between items-center mt-1">
                            <div>
                                <p id="exercise-name-${ex.id}" class="font-semibold">
                                    <a id="exercise-link-${ex.id}" href="${videoLink}" target="_blank" title="Watch demonstration" class="text-indigo-600 hover:text-indigo-800">
                                        ${exerciseName} <span class="text-xs">▶️</span>
                                    </a>
                                </p>
                                <p class="text-sm text-gray-500">${ex.sets} sets x ${ex.reps} reps</p>
                            </div>
                            <div>
                                <button class="gemini-btn px-3 py-1 rounded-md text-xs" data-exercise-id="${ex.id}" data-exercise-name="${exerciseName}" data-muscle-group="${ex.name}" title="Get AI Alternative">Alternative</button>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            workoutContent.innerHTML = html;
            addExerciseButtonListeners();
            updateChart();
            updateSlidersFromWorkout();
        }

        function addExerciseButtonListeners() {
            document.querySelectorAll('[data-exercise-id]').forEach(button => {
                button.addEventListener('click', (e) => {
                    const targetButton = e.currentTarget;
                    const exerciseName = targetButton.dataset.exerciseName;
                    const muscleGroup = targetButton.dataset.muscleGroup;
                    const environment = isHome ? 'home' : 'gym';
                    getExerciseAlternative(exerciseName, muscleGroup, environment, targetButton);
                });
            });
        }

        function switchTab(workoutId) {
            currentWorkout = workoutId;
            Object.keys(tabs).forEach(id => {
                tabs[id].classList.remove('active-tab');
                tabs[id].classList.add('inactive-tab');
            });
            tabs[workoutId].classList.add('active-tab');
            tabs[workoutId].classList.remove('inactive-tab');
            renderWorkout();
        }

        function setupEventListeners() {
            btn2Day.addEventListener('click', () => { currentPlan = '2-day'; updateScheduleDisplay(); });
            btn3Day.addEventListener('click', () => { currentPlan = '3-day'; updateScheduleDisplay(); });
            Object.keys(tabs).forEach(id => { tabs[id].addEventListener('click', () => switchTab(id)); });
            envToggle.addEventListener('change', (e) => {
                isHome = e.target.checked;
                document.querySelector('.dot').style.transform = isHome ? 'translateX(100%)' : 'translateX(0)';
                renderWorkout();
            });
            
            generatePlanBtn.addEventListener('click', generateCustomWorkout);
            resetPlanBtn.addEventListener('click', () => {
                workoutData = JSON.parse(JSON.stringify(originalWorkoutData));
                renderWorkout();
            });

            let activeSlider = null;
            Object.keys(sliders).forEach(key => {
                sliders[key].addEventListener('mousedown', () => activeSlider = key);
                sliders[key].addEventListener('touchstart', () => activeSlider = key);
                sliders[key].addEventListener('input', handleSliderInput);
            });
            document.addEventListener('mouseup', () => activeSlider = null);
            document.addEventListener('touchend', () => activeSlider = null);

            function handleSliderInput() {
                if (!activeSlider) return;

                const total = 100;
                const slidersArray = Object.values(sliders);
                const activeIndex = Object.keys(sliders).indexOf(activeSlider);
                
                let currentValue = parseInt(sliders[activeSlider].value);
                let sumOfOthers = 0;
                slidersArray.forEach((s, i) => {
                    if (i !== activeIndex) sumOfOthers += parseInt(s.value);
                });

                if (sumOfOthers + currentValue > total) {
                    let diff = (sumOfOthers + currentValue) - total;
                    let otherSliders = slidersArray.filter((s, i) => i !== activeIndex);
                    
                    otherSliders.forEach(slider => {
                        let sliderValue = parseInt(slider.value);
                        let reduction = Math.round(diff * (sliderValue / sumOfOthers));
                        slider.value = Math.max(0, sliderValue - reduction);
                    });

                    let newSum = slidersArray.reduce((acc, s) => acc + parseInt(s.value), 0);
                    if (newSum !== total) {
                         sliders[activeSlider].value = currentValue - (newSum - total);
                    }
                }
                updateSliderValuesAndChart();
            }
        }
        
        function updateSliderValuesAndChart() {
            const lowerVal = parseInt(sliders.lower.value);
            const upperVal = parseInt(sliders.upper.value);
            const coreVal = 100 - lowerVal - upperVal;
            
            sliders.core.value = coreVal;

            values.lower.textContent = `${lowerVal}%`;
            values.upper.textContent = `${upperVal}%`;
            values.core.textContent = `${coreVal}%`;

            if (muscleChart) {
                muscleChart.data.datasets[0].data = [lowerVal, upperVal, coreVal];
                muscleChart.update();
            }
        }

        function updateSlidersFromWorkout() {
            const focus = workoutData[currentWorkout].muscleFocus;
            sliders.lower.value = focus[0];
            sliders.upper.value = focus[1];
            sliders.core.value = focus[2];
            updateSliderValuesAndChart();
        }
        
        function createChart() {
            const ctx = document.getElementById('muscle-chart').getContext('2d');
            muscleChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Lower Body', 'Upper Body', 'Core & Cardio'],
                    datasets: [{
                        label: 'Muscle Focus',
                        data: [],
                        backgroundColor: ['#4f46e5', '#14b8a6', '#f97316'],
                        borderColor: ['#4f46e5', '#14b8a6', '#f97316'],
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { 
                            display: false 
                        }
                    },
                    scales: {
                        x: {
                            max: 100,
                            ticks: { display: false },
                            grid: { display: false }
                        },
                        y: {
                            grid: { display: false }
                        }
                    }
                }
            });
        }

        function updateChart() {
            if (!muscleChart) return;
            const focus = workoutData[currentWorkout].muscleFocus;
            muscleChart.data.datasets[0].data = focus;
            muscleChart.update();
        }

        function init() {
            updateScheduleDisplay();
            createChart();
            renderWorkout();
            setupEventListeners();
        }

        window.onload = init;
    </script>

</body>
</html>
